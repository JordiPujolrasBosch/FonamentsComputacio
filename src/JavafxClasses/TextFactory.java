package JavafxClasses;

public class TextFactory {
    public static String miniDfa()   {return "DFA";}
    public static String miniDfaA()  {return "DFA A";}
    public static String miniDfaB()  {return "DFA B";}
    public static String miniNfa()   {return "NFA";}
    public static String miniNfaA()  {return "NFA A";}
    public static String miniNfaB()  {return "NFA B";}
    public static String miniRegex() {return "REGEX";}
    public static String miniRegexA(){return "REGEX A";}
    public static String miniRegexB(){return "REGEX B";}
    public static String miniCfg()   {return "CFG";}
    public static String miniCfgA()  {return "CFG A";}
    public static String miniCfgB()  {return "CFG B";}
    public static String miniResult(){return "RESULT";}
    public static String miniWords() {return "WORDS";}

    //CFG MAIN

    public static String titleEqualCfgCfg(){return "Compare cfg & cfg";}
    public static String desEqualCfgCfg(){return "Check if two context free grammars are equivalent.";}

    public static String titleCounterExampleCfgs(){return "Counterexample cfg & cfg";}
    public static String desCounterExampleCfgs(){return "Check if two context free grammars are equivalent. If are different it search a counterexample, a word that can be generated by only one of them.";}

    public static String titleCheckAmbiguity(){return "Ambiguity cfg";}
    public static String desCheckAmbiguity(){return "Check if a context free grammar is ambiguous. A grammar is ambiguous if it can generate al least one word in two or more different ways.";}

    //COMPARE

    public static String titleEqualDfaDfa(){return "Compare dfa & dfa";}
    public static String desEqualDfaDfa(){return "Check if two deterministic finite automatons are equivalent.";}

    public static String titleEqualDfaNfa(){return "Compare dfa & nfa";}
    public static String desEqualDfaNfa(){return "Check if a deterministic finite automaton and a nondeterministic finite automaton are equivalent.";}

    public static String titleEqualDfaRegex(){return "Compare dfa & regex";}
    public static String desEqualDfaRegex(){return "Check if a deterministic finite automaton and a regular expression are equivalent.";}

    public static String titleEqualNfaNfa(){return "Compare nfa & nfa";}
    public static String desEqualNfaNfa(){return "Check if two nondeterministic finite automatons are equivalent.";}

    public static String titleEqualNfaRegex(){return "Compare nfa & regex";}
    public static String desEqualNfaRegex(){return "Check if a nondeterministic finite automaton and a regular expression are equivalent.";}

    public static String titleEqualRegexRegex(){return "Compare regex & regex";}
    public static String desEqualRegexRegex(){return "Check if two regular expressions are equivalent.";}

    //DFA transformations

    public static String titleMinimizeDfa(){return "Minimize dfa";}
    public static String desMinimizeDfa(){return "Minimize a deterministic finite automaton.";}

    public static String titleReverseDfa(){return "Reverse dfa";}
    public static String desReverseDfa(){return "Make the reverse of a deterministic finite automaton. The result is a nondeterministic finite automaton that accepts the same words as the original but reversed.";}

    public static String titleComplementDfa(){return "Complement dfa";}
    public static String desComplementDfa(){return "Make the complement of a deterministic finite automaton. The result is a deterministic finite automaton that accepts the word that the original doesn't accept.";}

    //TRANSFORM

    public static String titleTransformDfaNfa(){return "Transform dfa to nfa";}
    public static String desTransformDfaNfa(){return "Transform a deterministic finite automaton to a nondeterministic finite automaton.";}

    public static String titleTransformDfaRegex(){return "Transform dfa to regex";}
    public static String desTransformDfaRegex(){return "Transform a deterministic finite automaton to a regular expression.";}

    public static String titleTransformNfaDfa(){return "Transform nfa to dfa";}
    public static String desTransformNfaDfa(){return "Transform a nondeterministic finite automaton to a deterministic finite automaton.";}

    public static String titleTransformNfaRegex(){return "Transform nfa to regex";}
    public static String desTransformNfaRegex(){return "Transform a nondeterministic finite automaton to a regular expression.";}

    public static String titleTransformRegexDfaMinim(){return "Transform regex to dfa minimized";}
    public static String desTransformRegexDfaMinim(){return "Transform a regular expression to a deterministic finite automaton minimized.";}

    public static String titleTransformRegexDfaNotMinim(){return "Transform regex to dfa not minimized";}
    public static String desTransformRegexDfaNotMinim(){return "Transform a regular expression to a deterministic finite automaton not minimized.";}

    public static String titleTransformRegexNfaMinim(){return "Transform regex to nfa minimized";}
    public static String desTransformRegexNfaMinim(){return "Transform a regular expression to a nondeterministic finite automaton minimized.";}

    public static String titleTransformRegexNfaNotMinim(){return "Transform regex to nfa not minimized";}
    public static String desTransformRegexNfaNotMinim(){return "Transform a regular expression to a nondeterministic finite automaton not minimized.";}

    public static String titleTransformDfaCfg(){return "Transform dfa to cfg";}
    public static String desTransformDfaCfg(){return "Transform a deterministic finite automaton to a context free grammar.";}

    public static String titleTransformNfaCfg(){return "Transform nfa to cfg";}
    public static String desTransformNfaCfg(){return "Transform a nondeterministic finite automaton to a context free grammar.";}

    public static String titleTransformRegexCfg(){return "Transform regex to cfg";}
    public static String desTransformRegexCfg(){return "Transform a regular expression to a context free grammar.";}

    //CHECK WORDS

    public static String titleCheckWordsDfa(){return "Check words dfa";}
    public static String desCheckWordsDfa(){return "Test if a list of words are accepted by a deterministic finite automaton.";}

    public static String titleCheckWordsNfa(){return "Check words nfa";}
    public static String desCheckWordsNfa(){return "Test if a list of words are accepted by a nondeterministic finite automaton.";}

    public static String titleCheckWordsRegex(){return "Check words regex";}
    public static String desCheckWordsRegex(){return "Test if a list of words can be generated by a regular expression.";}

    public static String titleCheckWordsCfg(){return "Check words cfg";}
    public static String desCheckWordsCfg(){return "Test if a list of words can be generated by a context free grammar.";}

    //GENERATE WORDS

    public static String titleGenerateWordsDfa(){return "Generate words dfa";}
    public static String desGenerateWordsDfa(){return "Generate a list of words that are accepted by a deterministic finite automaton.";}

    public static String titleGenerateWordsNfa(){return "Generate words nfa";}
    public static String desGenerateWordsNfa(){return "Generate a list of words that are accepted by a nondeterministic finite automaton.";}

    public static String titleGenerateWordsRegex(){return "Generate words regex";}
    public static String desGenerateWordsRegex(){return "Generate a list of words from a regular expression.";}

    public static String titleGenerateWordsCfg(){return "Generate words cfg";}
    public static String desGenerateWordsCfg(){return "Generate a list of words from a context free grammar.";}

    //CFG transformations

    public static String titleSimplifyGrammar(){return "Simplify cfg";}
    public static String desSimplifyGrammar(){return "Simplify a context free grammar. Removes non derivable rules, non reachable rules, empty rules and unit rules.";}

    public static String titleTransformChomsky(){return "Transform cfg chomsky";}
    public static String desTransformChomsky(){return "Transform a context free grammar to the chomsky form. On chomsky form, every rule is \"A->BC\" or \"A->a\".";}

    public static String titleTransformGriebach(){return "Transform cfg griebach";}
    public static String desTransformGriebach(){return "Transform a context free grammar to the griebach form. On griebach form, every derivation starts with a terminal.";}
}
